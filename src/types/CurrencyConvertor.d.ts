/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CurrencyConvertorInterface extends ethers.utils.Interface {
  functions: {
    "STARKWARE_CONTRACT()": FunctionFragment;
    "approveMaximumOnL2()": FunctionFragment;
    "deposit(address,uint256,address,uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "STARKWARE_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveMaximumOnL2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "STARKWARE_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveMaximumOnL2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;

  events: {
    "LogConvertedDeposit(address,address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogConvertedDeposit"): EventFragment;
}

export class CurrencyConvertor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CurrencyConvertorInterface;

  functions: {
    STARKWARE_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    approveMaximumOnL2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      tokenFrom: string,
      tokenFromAmount: BigNumberish,
      exchangeWrapper: string,
      starkKey: BigNumberish,
      positionId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  STARKWARE_CONTRACT(overrides?: CallOverrides): Promise<string>;

  approveMaximumOnL2(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    tokenFrom: string,
    tokenFromAmount: BigNumberish,
    exchangeWrapper: string,
    starkKey: BigNumberish,
    positionId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    STARKWARE_CONTRACT(overrides?: CallOverrides): Promise<string>;

    approveMaximumOnL2(overrides?: CallOverrides): Promise<void>;

    deposit(
      tokenFrom: string,
      tokenFromAmount: BigNumberish,
      exchangeWrapper: string,
      starkKey: BigNumberish,
      positionId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    LogConvertedDeposit(
      account?: string | null,
      source?: null,
      exchangeWrapper?: null,
      tokenFrom?: null,
      tokenFromAmount?: null,
      tokenToAmount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        account: string;
        source: string;
        exchangeWrapper: string;
        tokenFrom: string;
        tokenFromAmount: BigNumber;
        tokenToAmount: BigNumber;
      }
    >;
  };

  estimateGas: {
    STARKWARE_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    approveMaximumOnL2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      tokenFrom: string,
      tokenFromAmount: BigNumberish,
      exchangeWrapper: string,
      starkKey: BigNumberish,
      positionId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    STARKWARE_CONTRACT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveMaximumOnL2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      tokenFrom: string,
      tokenFromAmount: BigNumberish,
      exchangeWrapper: string,
      starkKey: BigNumberish,
      positionId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
